.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "hswatchd" "8" "24.04.2024" "hswatchd 2.15.0 Finale" "hswatchd - copyright Hesti"
.hy
.SH NAME
.PP
\f[B]hswatchd\f[R] - Ein Daemon zum Ueberwachen von Dateien
.SH SYNOPSIS
.PP
Daemonen werden ueber \[lq]systemd\[rq] gestartet.
Dieser ueberwacht Dateien auf Aenderung und fuehrt, wenn vorhanden,
einen Befehl aus.
.SH DESCRIPTION
.PP
hswatchd ist ausgelegt auf kleinst moegliche CPU-Performance.
Er wird ueber den \f[I]systemd\f[R] gestartet.
Wer moechte kann sich gerne auch eine init-Loesung schreiben.
.PD 0
.P
.PD
Alle Parameter werden in der \f[B]\f[BI]/etc/hswatchd.rc\f[B]\f[R]
eingetragen.
.SH OPTIONS
.PP
\f[B]--version \f[R] :die aktuelle Version ausgeben lassen.
Das Programm wird allerdings dann beendet.
.PP
Da hswatchd als Daemon gestartet wird, gibt es fuer den Betrieb keine
Optionen.
Daf\[:u]r wird eine hswatchd.rc erwartet.
.SH SIGNALS
.TP
\f[B]SIGHUP,SIGKILL,SIGINT\f[R]
Der Daemon wird beendet
.TP
\f[B]SIGUSR1\f[R]
reload der hswatchd.rc
.TP
\f[B]SIGUSR2\f[R]
ausgabe der Infodatei
.SH ENVIRONMENT
.TP
Starten, stopppen, service:
siehe Anschnitt: \f[B]SYSTEMD\f[R]
.TP
Konfiguration:
siehe Anschnitt: \f[B]hswatchd.rc\f[R]
.SH SYSTEMD
.PP
Sicher gibt es viele Wege um einen Daemon zu laufen zu bekommen.
Derzeit wird aber SYSTEMD ueberall verwendet.
.PP
Achtung.
Zum grossen Teil werden ROOT-Rechte noetig sein.
.PP
Datei erstellen
.PD 0
.P
.PD
:/etc/systemd/system/hswatchd.service
.PP
Inhalt:
.IP
.nf
\f[C]
[Unit]
Description=hswatchd - demon watching files for changing
After=network.target

[Service]
ExecStart=/usr/sbin/hswatchd
ExecStop=/bin/kill -HUP $MAINPID
ExecReload=/bin/kill -USR1 $MAINPID

StandardOutput=null
#StandardOutput=/root/out.txt
#Restart=on-failure

[Install]
WantedBy=multi-user.target
\f[R]
.fi
.PP
#EOF
.PP
Service einrichten (einmalig, started danach automatisch mit):
.IP
.nf
\f[C]
systemctl daemon-reload
systemctl enable hswatchd.service
systemctl start hswatchd.service
systemctl status hswatchd
\f[R]
.fi
.SH hswatchd.rc
.PP
\f[B]Parameter:\f[R]
.TP
# Server Einstellungen
Zeilen, die mit `#' beginnen, sind Kommentare und werden entsprechend
ignoriert.
Uebrigens auch Leerzeilen
.TP
port = 8080
Portangabe.
hswatchd kann \[:u]ber http abgefragt werden
siehe Anschnitt: **HTTP*
.TP
time = ###
Defaultangabe zum verweilen zwischen einer Pruefeinheit.
Ist nicht so wichtig, da die Zeit automatisch errechnet wird.
.TP
cache = \f[I]true\f[R] oder \f[I]false\f[R]
Die Benutzung des Caches erlauben/verbieten
.TP
cachepath = \f[I]Pfad_zur_Cachedatei\f[R]
Der Pfad f\[:u]r eine chache-Datei.
Es wird in dieser Datei die sekundengenaue Zeit der letzten Pruefung
jedes File gespeichert.
Gefolgt von dem Dateinamen.
.TP
infoupdate = 3600
In diesem Fall wird alle 3600 Sekunden ein Infofile erstellt.
.TP
infofile = \f[I]File_fuer_InfoFile\f[R]
Der vollst\[:a]ndige Pfad zur Datei.
Es wird eine reine Textdatei geschrieben.
Ist Markdown formatierbar.
Diese Angabe kann auch leer sein (oder besser auskommentiert) werden.
.PP
Jeder Eintrag mit \[lq]file \&....\[rq] in der hswatchd.rc wird in eine
einfach verkettete Liste sortiert, nach naechster Bearbeitungszeit,
aufgenommen.
Dadurch wird erreicht das der naechste zu verarbeitende Datensatz ganz
oben steht.
Die Diff-Zeit wird auch genommen, um die naechste Wartezeit zu setzen.
Ist so ein Datensatz abgearbeitet, wird neu entschieden, wo er in der
Liste zu stehen hat.
Und es wird eine neue Wartezeit bestimmt.
Diese Informationen koennen auch \[:u]ber http abgerufen werden !!
.PP
Konfigurations-Datei erstellen
.PD 0
.P
.PD
:/etc/hswatchd.rc
.SS Beispiel:
.IP
.nf
\f[C]
# systemweite hswatchd - Konfigurationsdatei

port        = 8080
time        = 1
cache       = true
cachepath   = /var/hswatchd/files.cache
infoupdate  = 3600
infofile    = /srv/pub/www/data/watch-debug-hesti.txt

# File - Section
file /pub/share/network/stuff.txt       25  /bin/bash /root/bin/doany.sh inplement stuff
file /pub/share/network/admin_hosts     60  cp /pub/share/network/newfile_hosts /etc/hosts
\f[R]
.fi
.SH HTTP-Service
.PP
hswatchd verf\[:u]gt eine rudiment\[:a]re html-Schnittstelle.
Hier lassen sich ein paar Informationen abrufen.
Der Port ist in der \f[I]hswatchd.rc\f[R] zu definiert.
.TP
\f[I]server:8080/reload.cgi\f[R]
wird hswatchd dazu veranlassen die hswatchd.rc neu zu laden.
.TP
\f[I]server:8080/date.cgi\f[R]
gibt das aktuelle datum mit der Zeit aus.
Das war nur zum Testen drin, aber es stoert ja auch niemanden.
.TP
\f[I]server:8080/nextwatch.html\f[R]
Eine ausfuerliche Seite, welche Dateien als naechstes geprueft werden
und eine kurze Uebersicht welche Parameter mit wirken.
.TP
\f[I]server:8080/drive.cgi?\f[R]
Gefolgt von dem Mount-Point gibt ein paar Informationen ueber gemountete
Laufwerke auf dem Server preis.
Diese koennen so gezielt gesammelt werden.
Ein Aufruf wie \f[I]server:8080//drive.cgi?&boot\f[R] wird die
RootPartition und die boot-Partition ausgeben.
.PP
#EOF
.SH AUTHORS
.PP
Heiko Stoevesandt - alias Hesti - <hstools@t-online.de>
.SH FEHLER
.PP
Fehler (auch in dieser Manpage) unbedingt bitte melden
